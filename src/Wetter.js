// Generated by CoffeeScript 2.6.1

import React, { Component } from 'react'
import moment from 'moment'
import * as _ from 'lodash'
import { Container, Divider, Icon, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@material-ui/core';
;
var Wetter, icons;

icons = {
  1: "sun",
  2: "cloud-sun",
  3: "cloud",
  4: "cloud",
  9: "cloud-rain",
  10: "cloud-showers-heavy",
  11: "bolt",
  13: "snowflake",
  50: "smog"
};

Wetter = class Wetter extends Component {
  constructor() {
    super();
    this._isMounted = false;
    this.state = {
      city: ""
    };
  }

  componentDidMount() {
    this._isMounted = true;
    return moment.locale('de');
  }

  // fetch("https://maps.googleapis.com/maps/api/geocode/json?latlng=#{@props.weatherResponse?.lat},#{@props.weatherResponse?.lon}&key=#{process.env.GEOLOCATION_KEY}")
  //   .then (response) => response.json()
  //   .then (data) => console.log data #@setState city: data if @_isMounted
  //   .catch (e) => @setState city: "" if @_isMounted
  componentWillUnmount() {
    return this._isMounted = false;
  }

  render() {
    var ref, ref1, ref2;
    return <Container component="div" className="content" maxWidth="sm">
      <Typography variant="h2" component="h1" className="heading" gutterBottom> {'Wetter'} </Typography>
      <Typography variant="h5" component="h2"> {this.state.city} </Typography>
      {this.props.weatherResponse === "load" ? <Typography variant="body1">Wetter wird geladen...</Typography> : (this.props.weatherResponse != null) && ((ref = this.props.weatherResponse) != null ? (ref1 = ref.daily) != null ? ref1.length : void 0 : void 0) > 0 ? <List dense>
            {_.sortBy((ref2 = this.props.weatherResponse) != null ? ref2.daily : void 0, 'dt').map((day) => {
      var ref3, ref4, ref5, ref6, ref7, subText;
      subText = [
        <span key={'subText1' + day.dt} style={{
          display: 'block'
        }}>
                    min. {Math.round((ref3 = day.feels_like) != null ? ref3.morn : void 0)}°C / max. {Math.round((ref4 = day.feels_like) != null ? ref4.day : void 0)}°C
                  </span>,
        <span key={'subText2' + day.dt} style={{
          display: 'block'
        }}>
                    {(ref5 = day.weather) != null ? (ref6 = ref5[0]) != null ? ref6.description : void 0 : void 0}
                  </span>
      ];
      return [
        <ListItem key={'day' + day.dt}>   
                    <ListItemAvatar>
                      <Icon className={`fas fa-${icons[parseInt((ref7 = day.weather) != null ? ref7[0].icon : void 0)]}`} style={{
          fontSize: 20,
          width: 26,
          textAlign: 'center'
        }} />
                    </ListItemAvatar>
                    <ListItemText id={day.dt} primary={moment(day.dt * 1000).format("dd, LL")} secondary={subText} />
                  </ListItem>,
        <Divider key={'dayDiv' + day.id} />
      ];
    })}
          </List> : <Typography variant="body1">Das Wetter konnte nicht abgefragt werden.</Typography>}
    </Container>;
  }

};

export default Wetter;
