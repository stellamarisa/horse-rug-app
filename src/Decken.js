// Generated by CoffeeScript 2.6.1

import React, { Component, useState, useEffect } from 'react'
import { useIndexedDB } from 'react-indexed-db'
import * as _ from 'lodash'
import { Avatar, Button, Container, Dialog, DialogActions, Divider, Fab, FormControl, Grid, Icon, IconButton, InputLabel, List, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, MenuItem, Radio, Select, TextField, Typography } from '@material-ui/core';
;
var AddNewButton, Decken, RugList;

AddNewButton = function(props) {
  var add, handleClick;
  ({add} = useIndexedDB('Decke'));
  handleClick = () => {
    if (props.brand !== "") {
      return add({
        brand: props.brand,
        filling: props.filling,
        color: props.color
      }).then((event) => {
        return props.onClose();
      }, (error) => {
        return console.error(error);
      });
    }
  };
  return <Button onClick={handleClick} color="primary"> {'Speichern'} </Button>;
};

RugList = function(props) {
  var colors, deleteRecord, deleteRug, getAll, rugs, setRugs;
  ({getAll, deleteRecord} = useIndexedDB('Decke'));
  [rugs, setRugs] = useState();
  useEffect(() => {
    return getAll().then((rugsFromDB) => {
      if ((rugs != null ? rugs.length : void 0) !== (rugsFromDB != null ? rugsFromDB.length : void 0)) {
        return setRugs(rugsFromDB);
      }
    });
  });
  deleteRug = (rug) => {
    return () => {
      return deleteRecord(rug.id).then(() => {
        return setRugs(_.reject(rugs, {
          id: rug.id
        }));
      });
    };
  };
  colors = {
    deeppink: ['deeppink', 'darkred'],
    red: ['red', 'maroon'],
    orange: ['orange', 'orangered'],
    yellow: ['yellow', 'goldenrod'],
    limegreen: ['greenyellow', 'limegreen'],
    green: ['seagreen', 'darkgreen'],
    teal: ['lightseagreen', 'darkslategrey'],
    cyan: ['cyan', 'darkcyan'],
    blue: ['slateblue', 'black'],
    purple: ['mediumorchid', 'darkmagenta'],
    maroon: ['sienna', 'maroon'],
    black: ['darkslategrey', 'black'],
    grey: ['grey', 'darkslategrey']
  };
  if ((rugs != null) && (rugs != null ? rugs.length : void 0) > 0) {
    return <List dense>
      {_.sortBy(rugs, 'filling').map((rug) => {
      var ref, ref1;
      return [
        <ListItem key={'rug' + rug.id}>   
              <ListItemAvatar>
                <Avatar style={{
          background: `radial-gradient(${(ref = colors[rug.color]) != null ? ref[0] : void 0}, ${(ref1 = colors[rug.color]) != null ? ref1[1] : void 0})`
        }}> {''} </Avatar>
              </ListItemAvatar>
              <ListItemText id={rug.brand} primary={rug.brand} secondary={rug.filling + 'g'} />
              <ListItemSecondaryAction>
                <IconButton edge="end" aria-label="delete" onClick={deleteRug(rug)}>
                  <Icon className="fas fa-trash" style={{
          fontSize: 20
        }} />
                </IconButton>
              </ListItemSecondaryAction>
            </ListItem>,
        <Divider key={'rugDiv' + rug.id} />
      ];
    })}
    </List>;
  } else {
    return <Typography variant="body1">Noch keine Decke angelegt.</Typography>;
  }
};

Decken = class Decken extends Component {
  constructor() {
    super();
    this.state = {
      showForm: false,
      filling: 0,
      brand: "",
      color: "red"
    };
  }

  render() {
    var colors;
    colors = ['deeppink', 'red', 'orange', 'yellow', 'limegreen', 'green', 'teal', 'cyan', 'blue', 'purple', 'maroon', 'black', 'grey'];
    return <Container component="div" className="content" maxWidth="sm">
      <Typography variant="h2" component="h2" className="heading" gutterBottom>
        {'Decken'}
        <Fab color="primary" size="small" aria-label="add" onClick={() => {
      return this.setState({
        showForm: true
      });
    }} style={{
      marginLeft: '30px'
    }}>
          <Icon className="fas fa-plus" />
        </Fab>
      </Typography>

      <Dialog open={this.state.showForm} onClose={() => {
      return this.setState({
        showForm: false
      });
    }}>
        <InputLabel id="brand-label" margin="dense" shrink>Hersteller / Modell / Bezeichnung</InputLabel>
        <TextField id="brand" type="text" value={this.state.brand} fullWidth className={this.state.brand === "" ? "required" : ""} onChange={(ev) => {
      var ref;
      return this.setState({
        brand: (ref = ev.target) != null ? ref.value : void 0
      });
    }} />
        
        <FormControl>
          <InputLabel id="filling-label" shrink>FÃ¼llung</InputLabel>
          <Select labelId="filling-label" id="filling" value={this.state.filling} onChange={(ev) => {
      var ref;
      return this.setState({
        filling: (ref = ev.target) != null ? ref.value : void 0
      });
    }}>
            <MenuItem value={0}>{'0g'}</MenuItem>
            <MenuItem value={50}>{'50g'}</MenuItem>
            <MenuItem value={100}>{'100g'}</MenuItem>
            <MenuItem value={150}>{'150g'}</MenuItem>
            <MenuItem value={200}>{'200g'}</MenuItem>
            <MenuItem value={250}>{'250g'}</MenuItem>
            <MenuItem value={300}>{'300g'}</MenuItem>
            <MenuItem value={350}>{'350g'}</MenuItem>
            <MenuItem value={400}>{'400g'}</MenuItem>
          </Select>
        </FormControl>

        <InputLabel id="color-label" margin="dense" shrink>Farbe</InputLabel>
        <Grid>
          {colors.map((color) => {
      return <Radio key={'radio' + color} disableRipple style={{
        color: color
      }} checked={this.state.color === color} onChange={(ev) => {
        var ref;
        return this.setState({
          color: (ref = ev.target) != null ? ref.value : void 0
        });
      }} value={color} name="radio-button-color" />;
    })}
        </Grid>

        <DialogActions>
          <Button color="primary" onClick={() => {
      return this.setState({
        showForm: false,
        filling: 1,
        brand: "",
        color: "red"
      });
    }}> {'Abbrechen'} </Button>
          <AddNewButton brand={this.state.brand} filling={this.state.filling} color={this.state.color} onClose={() => {
      return this.setState({
        showForm: false,
        filling: 0,
        brand: "",
        color: "red"
      });
    }} />
        </DialogActions>
      </Dialog>

      <RugList />
    </Container>;
  }

};

export default Decken;
