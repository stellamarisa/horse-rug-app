// Generated by CoffeeScript 2.6.1

import React, { Component, useState, useEffect } from 'react'
import { useIndexedDB } from 'react-indexed-db';
import * as _ from 'lodash';
import { Avatar, Button, Container, Dialog, DialogActions, Divider, Fab, FormControl, Icon, IconButton, InputLabel, List, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, MenuItem, Select, TextField, Typography } from '@material-ui/core';
;
var AddNewButton, HorseList, Pferde;

AddNewButton = function(props) {
  var add, handleClick;
  ({add} = useIndexedDB('Pferd'));
  handleClick = () => {
    var ref, ref1;
    if (((ref = props.formValues) != null ? ref.name : void 0) !== "") {
      return (((ref1 = props.formValues) != null ? ref1.file : void 0) != null ? new Promise(function(resolve, reject) {
        var reader, ref2;
        reader = new FileReader();
        reader.addEventListener("load", (function() {
          return resolve(reader.result);
        }), false);
        return reader.readAsDataURL((ref2 = props.formValues) != null ? ref2.file : void 0);
      }) : Promise.resolve(null)).then((img) => {
        var ref2, ref3;
        return add({
          name: (ref2 = props.formValues) != null ? ref2.name : void 0,
          sensibility: (ref3 = props.formValues) != null ? ref3.sensibility : void 0,
          foto: img
        }).then((event) => {
          return props.onClose();
        }, (error) => {
          return console.error(error);
        });
      });
    }
  };
  return <Button onClick={handleClick} color="primary"> {'Speichern'} </Button>;
};

HorseList = function(props) {
  var deleteHorse, deleteRecord, getAll, horses, setHorses;
  ({getAll, deleteRecord} = useIndexedDB('Pferd'));
  [horses, setHorses] = useState();
  useEffect(() => {
    return getAll().then((horsesFromDB) => {
      if ((horses != null ? horses.length : void 0) !== (horsesFromDB != null ? horsesFromDB.length : void 0)) {
        return setHorses(horsesFromDB);
      }
    });
  });
  deleteHorse = (horse) => {
    return () => {
      return deleteRecord(horse.id).then(() => {
        return setHorses(_.reject(horses, {
          id: horse.id
        }));
      });
    };
  };
  if ((horses != null) && (horses != null ? horses.length : void 0) > 0) {
    return <List dense>
      {_.sortBy(horses, 'name').map((horse) => {
      return [
        <ListItem key={'horse' + horse.id}>   
              <ListItemAvatar>
                <Avatar className="horse" src={horse.foto}>{horse.name[0]}</Avatar>
              </ListItemAvatar>
              <ListItemText id={horse.name} primary={horse.name} secondary={['Robust',
        'Empfindlich',
        'Absolute Frostbeule'][horse.sensibility - 1]} />
              <ListItemSecondaryAction>
                <IconButton edge="end" aria-label="delete" onClick={deleteHorse(horse)}>
                  <Icon className="fas fa-trash" style={{
          fontSize: 20
        }} />
                </IconButton>
              </ListItemSecondaryAction>
            </ListItem>,
        <Divider key={'horseDiv' + horse.id} />
      ];
    })}
    </List>;
  } else {
    return <Typography variant="body1">Noch kein Pferd angelegt.</Typography>;
  }
};

Pferde = class Pferde extends Component {
  constructor() {
    super();
    this.state = {
      showForm: false,
      sensibility: 1,
      name: "",
      file: null
    };
  }

  render() {
    return <Container component="div" className="content" maxWidth="sm">
      <Typography variant="h2" component="h2" className="heading" gutterBottom>
        {'Pferde'}
        <Fab color="primary" size="small" aria-label="add" onClick={() => {
      return this.setState({
        showForm: true
      });
    }} style={{
      marginLeft: '30px'
    }}>
          <Icon className="fas fa-plus" />
        </Fab>
      </Typography>

      <Dialog open={this.state.showForm} onClose={() => {
      return this.setState({
        showForm: false
      });
    }}>
        <InputLabel id="name-label" margin="dense" shrink>Name</InputLabel>
        <TextField id="name" type="text" value={this.state.name} fullWidth className={this.state.name === "" ? "required" : ""} onChange={(ev) => {
      var ref;
      return this.setState({
        name: (ref = ev.target) != null ? ref.value : void 0
      });
    }} />
        
        <FormControl>
          <InputLabel id="sensibility-label" shrink>Empfindlichkeit</InputLabel>
          <Select labelId="sensibility-label" id="sensibility" value={this.state.sensibility} onChange={(ev) => {
      var ref;
      return this.setState({
        sensibility: (ref = ev.target) != null ? ref.value : void 0
      });
    }}>
            <MenuItem value={1}>Robust</MenuItem>
            <MenuItem value={2}>Empfindlich</MenuItem>
            <MenuItem value={3}>Absolute Frostbeule</MenuItem>
          </Select>
        </FormControl>

        <InputLabel id="file-label" margin="dense" shrink>Foto</InputLabel>
        <TextField accept="image/*" id="horse-pic-file" type="file" onChange={(ev) => {
      var ref, ref1;
      return this.setState({
        file: (ref = ev.target) != null ? (ref1 = ref.files) != null ? ref1[0] : void 0 : void 0
      });
    }} />

        <DialogActions>
          <Button color="primary" onClick={() => {
      return this.setState({
        showForm: false,
        sensibility: 1,
        name: "",
        file: null
      });
    }}> {'Abbrechen'} </Button>
          <AddNewButton formValues={this.state} onClose={() => {
      return this.setState({
        showForm: false,
        sensibility: 1,
        name: "",
        file: null
      });
    }} />
        </DialogActions>
      </Dialog>

      <HorseList />
    </Container>;
  }

};

export default Pferde;
